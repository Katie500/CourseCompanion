@using Syncfusion.Blazor
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
@inject HttpClient Http

<div class="container">

    @if (courses == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @foreach (var course in courses)
        {
        <div style="scroll-padding-top: 1rem; padding-bottom: 1rem; margin:0.7rem; position:relative">

            <div class="plus-btn">+</div>

            <div class="e-card">
                <SfCard @key="course.Id">

                    <span class="right" style="padding-right:1rem">@course.Semester</span>

                    <div class="e-card-header">
                        @course.Id
                    </div>

                    <Collapsable Title="@course.Title" Collapsed="true">

                        <div class="card-content">
                            <p style="background-color:antiquewhite; line-height:1.2rem">

                                <b>Description:</b> @course.Description<br>

                                <b>Instructor:</b> @course.Instructor<br>

                                <b>Prerequisite(s):</b> @course.Prerequisites <br>
                                <b>Antirequisite(s):</b> @course.Antirequisites<br>
                                <b>Credits:</b> @course.Credits

                            </p>
                        </div>

                    </Collapsable>

                </SfCard>

            </div>

        </div>
        }
    }
</div>


@code {

    @* [Parameter]
    public Action<string> OnSearchTextChanged { get; set; }
    
    [Parameter]
    public string SearchText { get; set; } = ""; *@

    private CourseDetails[]? filterCourses;
    private CourseDetails[]? courses;

    protected override async Task OnInitializedAsync()
    {
        courses = await Http.GetFromJsonAsync<CourseDetails[]>("sample-data/courses.json");
    }
   
@*  private void FilterCourses(string searchText)
    {
        Console.WriteLine("triggered\n");

        if (!string.IsNullOrEmpty(searchText))
        {
            filterCourses = courses.Where(c => c.Title.Contains(searchText)).ToArray();
        }
        else
        {
            filterCourses = courses;
        }
    } *@

    public class CourseDetails
    {
        public string? Id { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
        public string? Instructor { get; set; }
        public int Levels { get; set; }
        public int Credits { get; set; }
        public string? Category { get; set; }
        public string? Semester { get; set; }
        public string? Faculty { get; set; }
        public string? Prerequisites { get; set; }
        public string? Antirequisites { get; set; }
    }

}

