@using Syncfusion.Blazor.Cards
@using Microsoft.AspNetCore.Components
@using CourseCompanion.Shared.Model
@using CourseCompanion.Shared.CourseCards
@using CourseCompanion.Shared.Services
@using CourseCompanion.Shared.State

@inject HttpClient Http
@inject StateContainer State
@inject ICourseService CourseService

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<!--Search Bar-->
<div class="text-center bg-blue-100">
    <div style="margin-bottom: 1rem">
        <input class="rounded m-6 p-6 h-8 border-blue-300" style="width:85%"
               @bind="SearchText" @oninput="HandleInput" placeholder="Course search..." />
    </div>
</div>

<!--Course Results List-->
<div style="height:84vh;overflow-y:scroll">
    <div class="container">
        @if (filterCourses == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (filterCourses.Count == 0)
        {
            <p><em>No Courses Found.</em></p>
        }
        else
        {
            @foreach (var course in State.filteredList) {
                <div style="scroll-padding-top: 1rem; padding-bottom: 1rem; margin:0.7rem; position:relative">
                    <CourseCards Course="@course" />
                </div>
            }
        }
    </div>
</div>

@code {

    
    public string? SearchText = "";

    public List<CourseDetails>? filterCourses;
    private List<CourseDetails>? courses;

    private string[] split = { "", "" };
    public string dept = "";
    public string level = "";

    // handle input for searches
    private void HandleInput(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        SearchText = e.Value.ToString();
        FilterCourses(SearchText);
    }

    // get the full course list
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Updated full course list");
        courses = await Http.GetFromJsonAsync<List<CourseDetails>>("sample-data/courses.json");
        State.fullList = courses;

        filterCourses = courses;
        State.filteredList = filterCourses;
    }

    protected override void OnInitialized()
    {
        // subscribe to OnCourseEvent and OnStateChange
        CourseService.OnCourseEvent += CourseHandler;
        State.OnStateChange += StateChangeHandler;
    }

    private void CourseHandler(CourseDetails removedCourse)
    {
        StateHasChanged();
    }
    public void StateChangeHandler()
    {
        // Update the UI to reflect the new state
        StateHasChanged();
    }

    /*
    Main search function
    Takes in searchText and filters the list based on certain criteria
    */
    private void FilterCourses(string searchText)
    {
        Console.WriteLine("FilterCourses({0}) called...", searchText);

        // general search
        if (!string.IsNullOrEmpty(searchText) && searchText.Length != 8)
        {
            List<CourseDetails> courseIDs = courses.Where(c =>
                    c.Id.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
            State.filteredList = State.filteredList.Concat(courseIDs).ToList();

            List<CourseDetails> courseTitles = courses.Where(c =>
                c.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
            State.filteredList = courseIDs.Concat(courseTitles).ToList();

            List<CourseDetails> courseLevel = courses.Where(c =>
                 (c.Level.ToString()).Contains(searchText.TrimEnd(new Char[] { '0' }))).ToList();
            State.filteredList = State.filteredList.Concat(courseLevel).ToList();

            List<CourseDetails> courseSemester = courses.Where(c =>
                 c.Semester.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
            State.filteredList = State.filteredList.Concat(courseSemester).ToList();

        }
        if (string.IsNullOrEmpty(searchText))
        {
            State.filteredList = courses;
        }

        // very dumb way for string entries like "cpsc 400" to show all 400 lvl cpsc courses
        if (searchText.Length == 8)
        {

            // create a list of possible exact matches
            List<CourseDetails> exactMatch = courses
                .Where(c => c.Id.Equals(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList();

            // check if the courses exists in the main list
            bool exactSearch = courses
                .Any(c => c.Id.Equals(searchText, StringComparison.OrdinalIgnoreCase));

            // parse the user string
            char[] delim = new char[] { ' ' };
            split = searchText.Split(new char[0]);

            // if there's an exact match, just return that (to account for seng 300 case)
            if (exactSearch) { filterCourses = exactMatch; }

            // otherwise we have a search that's not an exact match
            if (!exactSearch)
            {

                // search is for a full level (ex. math 300)
                if (searchText.EndsWith("0"))
                {
                    // user typed the format: <dept> <level> (cpsc 400)
                    if (split[1].Contains("0"))
                    {
                        dept = split[0];
                        level = split[1];
                    }
                    // otherwise format is: <level> <dept> (400 cpsc)
                    if (!split[1].Contains("0"))
                    {
                        dept = split[1];
                        level = split[0];
                    }

                    // otherwise we search for dept and level only
                    if (Int32.Parse(level) % 100 == 0)
                    {
                        State.filteredList = (courses
                        .Where(c => c.Id.StartsWith(dept, StringComparison.OrdinalIgnoreCase))
                        .Where(c => c.Level.ToString().Equals(level)))
                        .ToList();
                    }


                }
                // the last case is that we have a search that's not in the list at all and not a level search
                else
                {
                    State.filteredList = filterCourses = courses;
                }
            }

        }
        State.filteredList = filterCourses;
    }

}