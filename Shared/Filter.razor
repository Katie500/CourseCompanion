<!--Filter Bar-->
@using System.Linq
@using CourseCompanion.Shared.Model
@using System.Collections.Generic
@using CourseCompanion.Shared.State
@inject StateContainer State

<!-- Filter by Semester -->
<div>
    <div class="container px-4 text-center">
    <!-- Button to toggle semester filter panel -->
        @* <button @onclick='ToggleSemester' class="btn btn-primary btn-block">Semester</button> *@
        <!-- Collapsable panel for semester filter options -->
        <Collapsable Title="Semester" Collapsed="@isSemesterCollapsed">
            <div class="row g-2">
                @for (int i = 0; i < semesterNames.Count(); i++) {
                    int tempIndex = i; // create a temporary variable to capture the current value of i
                    <div class="col-6">
                        <button @onclick='() => FilterSemester(tempIndex)' 
                            class="@semesterNames[tempIndex] @semesterClasses[tempIndex]">@semesterNames[tempIndex]</button>
                    </div>
                }
            </div>
        </Collapsable>
        
    </div>  
</div>

@code {

    // Flag to keep track of whether the semester filter panel is collapsed or not
    bool isSemesterCollapsed = true;

    // Namesfor semesters
    List<string> semesterNames = new List<string>() {
        "fall",
        "winter",
        "spring",
        "summer"
    };

    // Flags to keep track of whether each button is active or inactive
    List<bool> semesterStates = new List<bool>() {false, false, false, false};

    // Classes for semesters
    List<string> semesterClasses = new List<string>() {
        "btn-light inactive btn btn-sm",
        "btn-light inactive btn btn-sm",
        "btn-light inactive btn btn-sm",
        "btn-light inactive btn btn-sm"
    };

    // Filters the course list by the selected semesters
    void FilterSemester(int semester)
    {
        // Toggles the state of the button between active and inactive
        semesterStates[semester] = !semesterStates[semester];

        // Change Class based on activity states
        if (semesterStates[semester]) {
            semesterClasses[semester] = "btn-info active btn btn-sm";
        } else {
            semesterClasses[semester] = "btn-light inactive btn btn-sm";
        }

        // Filter the course list by the active semesters
        List<CourseDetails> courseList = new List<CourseDetails>();

        for (int i = 0; i < semesterNames.Count(); i++) {
            
            int tempIndex = i;

            if (semesterStates[i]) {

                Console.WriteLine("\n       {0} is activated.\n", semesterNames[tempIndex]);
        
                Console.WriteLine("\n       Before Update:\n");

                // Log the current semester for each course in the course list
                foreach(var course in State.fullList) {
                    Console.WriteLine(course.Semester);
                }
            
                List<CourseDetails> temp = State.fullList.Where(c =>
                    c.Semester.Contains(semesterNames[i], StringComparison.OrdinalIgnoreCase)).ToList();

                courseList = courseList.Concat(temp).ToList();

                // Update the filtered course list with the filtered results
                State.ReplaceFilteredList(courseList);

                Console.WriteLine("\n\n     Updated filtered courses:\n");

                // Log the updated semester for each course in the filtered course list
                foreach(var course in State.filteredList) {
                    Console.WriteLine(course.Semester);
                }
            }

        }






    }

    // Toggles the collapsed state of the semester filter panel
    void ToggleSemester()
    {
        isSemesterCollapsed = !isSemesterCollapsed;
    }
}
