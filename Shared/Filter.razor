<!--Filter Bar-->
@using System.Linq
@using CourseCompanion.Shared.Model
@using System.Collections.Generic
@using CourseCompanion.Shared.State
@inject StateContainer State
@inject HttpClient Http
@namespace CourseCompanion.Shared.Filter
<!-- Filter by Semester -->
<div>
    <div class="container px-4 text-center">
    <!-- Button to toggle semester filter panel -->
        @* <button @onclick='ToggleSemester' class="btn btn-primary btn-block">Semester</button> *@
        <!-- Collapsable panel for semester filter options -->
        <Collapsable Title="Semester" Collapsed="@isSemesterCollapsed">
            <div class="row g-2">
                @for (int i = 0; i < semesterNames.Count(); i++) {
                    int tempIndex = i; // create a temporary variable to capture the current value of i
                    <div class="col-6">
                        <button @onclick='() => HandleSemesterFilter(tempIndex)' 
                                class=" btn btn-light btn-outline-secondary w-100 @semesterNames[tempIndex] @semesterClasses[tempIndex]">
                            @semesterNames[tempIndex]
                        </button>
                    </div>
                }
            </div>
        </Collapsable>
        
    </div>  
</div>

@code {

    int filterNum = 0;
    void FilterCourses() {

        // DEBUG
        @* Console.WriteLine("\n\n     FilterCourses() - State.searchedList before filtering:");
        Console.WriteLine("       --------  searchList  -------");
        foreach (var course in State.searchedList) {
            Console.WriteLine("    " + course.Semester);
        } *@
        // DEBUG

        List<CourseDetails> searched = new List<CourseDetails>(State.searchedList);
        IEnumerable<CourseDetails> filtered = searched.Cast<CourseDetails>();
        IEnumerable<CourseDetails> temp;
        filterNum = 0;

        temp = FilterBySemesters();         // filtered by semesters
        filtered = filtered.Intersect(temp);        

        // DEBUG
        @* Console.WriteLine("\n\n     RESULT:");
        Console.WriteLine("       --------  searchList  -------");
        foreach (var course in State.searchedList) {
            Console.WriteLine("    " + course.Semester);
        }
        Console.WriteLine("\n       --------  filteredList  -------");
        foreach(var course in filtered) {
            Console.WriteLine("         " + course.Semester);
        } *@
        // DEBUG

        State.filterNum = filterNum;
        State.UpdateFilteredList(filtered.ToList());
    }

    /***************************
    *         Semester
    ****************************/
    bool noSelectedSemester = true;

    bool isSemesterCollapsed = true;    // Flag to keep track of whether the semester filter panel is collapsed or not

    List<string> semesterNames = new List<string>() {      // Names for semesters
        "Fall",
        "Winter",
        "Spring",
        "Summer"
    };

    List<bool> semesterStates = new List<bool>() {false, false, false, false};  // Flags to keep track of whether each button is active or inactive
    List<string> semesterClasses = new List<string>() {     // Classes for semesters
        "btn-light inactive btn btn-sm",
        "btn-light inactive btn btn-sm",
        "btn-light inactive btn btn-sm",
        "btn-light inactive btn btn-sm"
    };

    void HandleSemesterFilter(int semester)       // Filters the course list by the selected semesters
    {
        // Toggles the state of the button between active and inactive
        semesterStates[semester] = !semesterStates[semester];

        // Change Class based on activity states
        if (semesterStates[semester]) {
            semesterClasses[semester] = "btn-info active btn btn-sm";
        } else {
            semesterClasses[semester] = "btn-light inactive btn btn-sm";
        }      

        FilterCourses();
    }

    List<CourseDetails> FilterBySemesters() {

        Console.WriteLine("====================");
        Console.WriteLine(" FilterBySemesters()");

        // Filter the course list by the active semesters
        List<CourseDetails> filteredCourses = new List<CourseDetails>();
        noSelectedSemester = true;

        // Check all semester states
        for (int i = 0; i < semesterNames.Count(); i++) {
            
            int tempIndex = i;
            if (!semesterStates[i]) {
                Console.WriteLine("       {0} is NOT activated.", semesterNames[tempIndex]);
            } else {
                noSelectedSemester = false;
                filterNum++;
                Console.WriteLine("       {0} is activated.", semesterNames[tempIndex]);

                List<CourseDetails> temp = State.fullList.Where(c =>
                    c.Semester.Contains(semesterNames[i], StringComparison.OrdinalIgnoreCase)).ToList();

                filteredCourses = filteredCourses.Concat(temp).ToList();
            }
        }

        // DEBUG
        Console.WriteLine("\n\n     after filtered by semester:\n");
        foreach(var course in filteredCourses) {
            Console.WriteLine("         " + course.Semester);
        }
        // DEBUG

        // if all filters are not selected, course list should not be changed at all
        if (noSelectedSemester) {
            Console.WriteLine("     No semester filter is selected!");
            return State.fullList;
        }

        return filteredCourses;
    }

    // Toggles the collapsed state of the semester filter panel
    void ToggleSemester()
    {
        isSemesterCollapsed = !isSemesterCollapsed;
    }
}
