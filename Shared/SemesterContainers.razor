@using System.Linq
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Navigations
@using Microsoft.AspNetCore.Components
@using CourseCompanion.Shared.Services
@using CourseCompanion.Shared.Model
@using CourseCompanion.Shared.CourseCards

@inject HttpClient Http
@inject ICourseService CourseService

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<div class="row">
    <div class="col-lg-6">
        <!-- Left semester container -->
        <div class="card bg-gradient bg-opacity-25 bg-info" style="padding-bottom:0.1rem">
            <h5 class="card-title bg-gradient bg-opacity-50 bg-info text-center"><b>Fall 2023</b></h5>
            <div class="container" style="position:relative; max-height:70vh; overflow-y:scroll">
                @foreach (var fallCourse in fallCourses)
                {
                    <SemesterCards Course="@fallCourse" />
                }
            </div>
                <p style="position:relative; color:grey; bottom:-1rem; text-align:right; padding-right: 0.2rem">
                    @fall_TotalCredits units
                </p>
        </div>
    </div>

    <div class="col-lg-6">
        <!-- Right semester container -->
        <div class="card bg-opacity-25 bg-warning" style="padding-bottom:0.1rem">
            <h5 class="card-title bg-opacity-50 bg-warning text-center"><b>Winter 2024</b></h5>
            <div class="container" style="position:relative; max-height:70vh; overflow-y:scroll">
                @foreach (var winterCourse in winterCourses)
                {
                    <SemesterCards Course="@winterCourse" />
                }
            </div>
                <p style="position:relative; color:grey; bottom:-1rem; text-align:right; padding-right: 0.2rem">
                    @winter_TotalCredits units
                </p>
        </div>
    </div>

        <!-- Buttons -->
        <div class="col-lg-6 text-center">
            <button type="button" class="btn btn-primary btn-outline-primary text-center" style="position: absolute; bottom: 2rem; right: 25rem; margin-left: inherit">Go To Spring/Summer</button>
            <button type="button" class="btn btn-danger text-center" style="position:absolute; bottom:2rem; right:16rem; margin-left:inherit">Reset</button>
            <button type="button" class="btn btn-danger text-center" style="position: absolute; bottom: 2rem; right: 10rem; margin-left: inherit">Export</button>
        </div>
</div>


@code{

    [Parameter]
    public CourseDetails? addedCourse { get; set; }

    private List<CourseDetails> fallCourses = new();
    private List<CourseDetails> winterCourses = new();
    private List<CourseDetails> springCourses = new();
    private List<CourseDetails> summerCourses = new();

    public int fall_TotalCredits = 0;
    public int winter_TotalCredits = 0;
    public int spring_TotalCredits = 0;
    public int summer_TotalCredits = 0;

    protected override void OnInitialized()
    {
        // subscribe to OnCourseEvent
        CourseService.OnCourseEvent += CourseHandler;
    }

    private void CourseHandler(CourseDetails addedCourse)
    {
        ParseCourse(addedCourse);
        StateHasChanged();
    }

    /* receives a CourseDetail object from CourseCards, implement a function where if the course is fall,
     it stores to the fallCourses, same for winterCourses */
    public void ParseCourse(CourseDetails addCourse)
    {

        // add courses based on semester
        if ((addCourse.Semester).Contains("fall", StringComparison.OrdinalIgnoreCase))
        { fallCourses.Add(addCourse); fall_TotalCredits += addCourse.Credits; }
        if ((addCourse.Semester).Contains("winter", StringComparison.OrdinalIgnoreCase))
        { winterCourses.Add(addCourse); winter_TotalCredits += addCourse.Credits; }
        if ((addCourse.Semester).Contains("spring", StringComparison.OrdinalIgnoreCase))
        { springCourses.Add(addCourse); spring_TotalCredits += addCourse.Credits; }
        if ((addCourse.Semester).Contains("summer", StringComparison.OrdinalIgnoreCase))
        { summerCourses.Add(addCourse); summer_TotalCredits += addCourse.Credits; }

        Console.WriteLine(addCourse.Id + " added to " + addCourse.Semester);
    }

}