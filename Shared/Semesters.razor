@using System.Linq
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Navigations
@using Microsoft.AspNetCore.Components
@using CourseCompanion.Shared.Services
@using CourseCompanion.Shared.Model
@using CourseCompanion.Shared.CourseCards

@inject HttpClient Http
@inject ICourseService CourseService

<div class="row text-center">
    <div class="col-lg-6">
        <!-- Left container -->
        <div class="card bg-gradient bg-opacity-25 bg-info">
            <div class="card-body">
                <h5 class="card-title bg-gradient bg-opacity-50 bg-info text-center"><b>Fall 2023</b></h5>
                <div class="btn-group-vertical w-100" role="group">

                    @foreach (var fallCourse in fallCourses)
                    {
                        <CourseCards Course="@fallCourse" />
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-6 text-center">
        <!-- Right container -->
        <div class="card bg-opacity-25 bg-warning">
            <div class="card-body">
                <h5 class="card-title bg-opacity-50 bg-warning text-center"><b>Winter 2024</b></h5>
                <div class="btn-group-vertical w-100 " role="group">
                    @foreach (var winterCourse in winterCourses)
                    {
                        <CourseCards Course="@winterCourse" />
                    }

                </div>
            </div>
        </div>

        <!-- Buttons -->
        <div class="col-lg-6 text-center">
            <br /><br />
            <button type="button" class="btn btn-primary btn-outline-primary text-center">Go To Spring/Summer</button>
            <br /><br /><br /><br /><br /><br />
            <button type="button" class="btn btn-danger text-center">Reset</button>
            <button type="button" class="btn btn-danger text-center">Export</button>
        </div>
    </div>
</div>


@code{

    [Parameter]
    public CourseDetails? addedCourse { get; set; }

    private List<CourseDetails> fallCourses = new();
    private List<CourseDetails> winterCourses = new();
    private List<CourseDetails> springCourses = new();
    private List<CourseDetails> summerCourses = new();

    protected override void OnInitialized()
    {
        // subscribe to OnCourseEvent
        CourseService.OnCourseEvent += CourseHandler;
    }
    
    private void CourseHandler(CourseDetails addedCourse)
    {
        ParseCourse(addedCourse);
        StateHasChanged();
    }

    /* receives a CourseDetail object from CourseCards, implement a function where if the course is fall,
     it stores to the fallCourses, same for winterCourses */
    public void ParseCourse(CourseDetails addCourse)
    {

        // add courses based on semester
        if ((addCourse.Semester).Contains("fall", StringComparison.OrdinalIgnoreCase))
        { fallCourses.Add(addCourse); }
        if ((addCourse.Semester).Contains("winter", StringComparison.OrdinalIgnoreCase))
        { winterCourses.Add(addCourse); }
        if ((addCourse.Semester).Contains("spring", StringComparison.OrdinalIgnoreCase))
        { springCourses.Add(addCourse); }
        if ((addCourse.Semester).Contains("summer", StringComparison.OrdinalIgnoreCase))
        { summerCourses.Add(addCourse); }

        Console.WriteLine(addCourse.Id + " added to " + addCourse.Semester);
    }

}